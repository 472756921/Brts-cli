#! /usr/bin/env node
const inquirer = require("inquirer");
const fse = require("fs-extra");
const ora = require("ora");
const downloadGitRepo = require("download-git-repo");
const path = require("path");
const memFs = require("mem-fs");
const editor = require("mem-fs-editor");
const chalk = require("chalk");
const { exec } = require("child_process");
const { repository } = require("../src/config");

inquirer
	.prompt([
		{
			type: "input",
			name: "projectName",
			message: "请输入项目名称：",
			validate(input) {
				if (!input) {
					return "项目名不能为空";
				}
				if (fse.existsSync(input)) {
					return `当前目录已存在${input}项目文件夹，请重新命名`;
				}
				return true;
			},
		},
		{
			type: "input",
			name: "description",
			message: "请输入项目描述：",
		},
		{
			type: "rawlist",
			name: "isTs",
			message: "是否使用 typescript?",
			choices: [
				{ name: "yes", value: 1 },
				{ name: "no", value: 0 },
			],
			default: 0,
		},
	])
	.then((answer) => {
		const { projectName, description, isTs } = answer;

		// process.cwd() 得到当前终端工作路径，projectPath：当前终端工作路径 + /项目名称
		const projectPath = path.join(process.cwd(), projectName);
		const downloadPath = path.join(projectPath, "__download__");

		const downloadSpinner = ora("正在下载模板，请稍候...\n");
		downloadSpinner.start();

		let gitUrl = repository.react;
		if (isTs) {
			gitUrl = repository.react_ts;
		}
		// 把模板项目下载到 临时文件夹 __download__
		downloadGitRepo(gitUrl, downloadPath, { clone: true }, (err) => {
			if (err) {
				downloadSpinner.color = "red";
				downloadSpinner.fail(err.message);
				return;
			}
			downloadSpinner.color = "green";
			downloadSpinner.succeed("下载模板完成");
			// 先遍历 __download__ 得到文件列表 （除开 package.json）
			let filesToCopy = [];
			try {
				const files = fse.readdirSync(downloadPath);
				files.forEach((file) => {
					if (file.indexOf("package.json") > -1) return;
					filesToCopy.push(file);
				});
			} catch (e) {
				downloadSpinner.color = "red";
				downloadSpinner.fail(e.message);
				return false;
			}
			// 将下载的到  __download__ 的内容复制到 项目下（projectPath）
			filesToCopy.forEach((file) => {
				fse.copySync(path.join(downloadPath, file), path.join(projectPath, file));
				console.log(`${chalk.green("✔ ")}${chalk.grey(`创建: ${projectName}/${file}`)}`);
			});

			// 建立模板
			const store = memFs.create();
			const memFsEditor = editor.create(store);

			// 将 用户输入的 projectName 和 description 写入到 内存中 package.json 模板中（ __download__ 中的文件为模板）
			/**
			 * @param {string} source 源文件路径
			 * @param {string} dest 目标文件路径
			 * @param {object} data 替换文本字段
			 */
			memFsEditor.copyTpl(path.join(downloadPath, "package.json"), path.join(projectName, "package.json"), {
				name: "<%= projectName %>",
				description: "<%= description %>",
				version: "1.0.0",
			});

			// 在硬盘中创建 package.json 文件 使用 memFsEditor.commit
			memFsEditor.commit(() => {
				console.log(`${chalk.green("✔ ")}${chalk.grey(`创建: ${projectName}/package.json`)}`);
				fse.remove(downloadPath);
				// 变更 Node.js 进程的当前工作目录
				process.chdir(projectPath);
				const installSpinner = ora(`安装项目依赖 ${chalk.green.bold("yarn install")}, 请稍候...`);
				installSpinner.start();
				exec("yarn install", (error, stdout, stderr) => {
					if (error) {
						installSpinner.color = "red";
						installSpinner.fail(chalk.red("安装项目依赖失败，请自行重新安装！"));
						console.log(error);
					} else {
						installSpinner.color = "green";
						installSpinner.succeed("安装依赖成功");
						console.log(`${stderr}${stdout}`);
						console.log();
						console.log(chalk.green("创建项目成功！"));
						console.log(chalk.green("Let's Coding"));
					}
				});
			});
		});
	});
